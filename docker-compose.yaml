services:
  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: "higload_project_db"
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "mypassword"
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user", "-d", "higload_project_db"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s
    networks:
      - backend
  rabbitmq:
    image: "rabbitmq:4-management"
    restart: always
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: "user"
      RABBITMQ_DEFAULT_PASS: "mypassword"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s
    networks:
      - backend
  web:
    build: ./review2
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: sh -c "python manage.py migrate && gunicorn review2.wsgi:application --bind 0.0.0.0:8000"
    networks:
      - backend
    volumes:
      - ./static:/review2/static
  celery:
    build: ./review2
    volumes:
      - ./review2:/review2
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: celery -A review2.celery worker --loglevel=info --concurrency=3
    environment:
      - NUM_ARTICLE=10000
    networks:
      - backend
  static:
      build: ./review2
      command: sh -c "python manage.py collectstatic --noinput"
      volumes:
        - ./static:/review2/static
      depends_on:
        - web
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx_conf:/etc/nginx/conf.d
      - ./static:/static
    ports:
      - "80:80"
    depends_on:
      - web
    networks:
      - backend

networks:
  backend:
    driver: bridge

